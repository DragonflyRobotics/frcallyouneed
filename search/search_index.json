{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Custom Swerve Documentation","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Electrical/Intro/","title":"Coming Soon","text":""},{"location":"Mechanical/Basics/","title":"Mechanical Basics","text":"<p>Here are some basic pointers to assembling the frame...</p>"},{"location":"Mechanical/Basics/#our-frame","title":"Our Frame","text":"<ul> <li>63.5 cm X 63.5 cm body </li> <li>Box tube: 2 cm X 4 cm with 0.3175 cm wall thickness</li> <li>SDS MK3 Fast Modules with NEO motors</li> <li>CANCoder (hall-effect) encoders for angle motor</li> </ul> <p>Important</p> <p>Wheels should be kept free of threads such as carpet and string. Threads can be caught in the wheels and can slow or even break the swerve components.</p>"},{"location":"Mechanical/Basics/#frame-dimensions","title":"Frame dimensions","text":"<p>A main component of the swerve drive--as seen by existing swerve teams--use a square frame. While a rectangular frame is certainly possible, a square frame is advantageous in many ways.</p>"},{"location":"Mechanical/Basics/#quick-tips","title":"Quick Tips","text":"<ul> <li>Swerve robots typically are slightly more unstable than tank drive robots. As such, it is crucial that the CG (center of gravity) is as low as possible to prevent a loss of stability while driving.</li> <li>Due to the fast acceleration and erratic movement of swerve robots, essential components should be mounted firmly to a stable object such as the frame. This is even more important in regards to the battery, due to the danger of having a loose battery and the potential robot deactivation, as such we recomend firmly strapping down the battery and ensuring that it will not slip out on tight turns or collisions.</li> <li>Any electrical components can be firmly mounted with electrical tape to ensure their stability while the robot is running due to the potentially devistating consequinces of having a electrical conponent come loose in a collision. </li> <li>Gearboxes should be greased regularly to ensure optimal functionality, but be careful that you use a propper amount of grease because having too much or too little can damage the gearboxes.</li> <li>The gearbox casing can be 3D printed to ensure that no grime or debris impede the functionality of the gearbox.</li> </ul>"},{"location":"Programming/Intro/","title":"Software","text":"<p>Software is an essential part in a robot's success. From autonomous to tele-op, to kinematics and vision, good software is often a major factor in whether your bot performes well or not.</p>"},{"location":"Programming/Intro/#swerve-drive-kinematics","title":"Swerve drive kinematics","text":"<p>It may seem complicated, but the workings of a swerve bot are relatively simple. Here are the concepts that we're assuming you understand already. If you don't, then please take some time to do some brief research.</p> <ul> <li>Vectors and vector math (addition + subtraction)</li> <li>Basics of forces (velocity and force)</li> <li>The premise behind a swerve bot</li> <li>Trigonometry (identities and formulas)</li> <li>How to take joystick values (direction and magnitude)</li> </ul> <p>The basis behind our kinematics is creating a velocity vector for each wheel. The vector points in the direction of the wheel and the size of the vector indicates the magnitude of the velocity. There are two vectors for each wheel that need to be combined: the strafing vector and the rotation vector. Throughout the code, we keep the vectors in component form for simplicity.</p>"},{"location":"Programming/Intro/#the-strafing-vector","title":"The strafing vector","text":"<p>When we want to strafe, note that each wheel points in the same direction:</p> <p>Add diagram of strafing wheels with their respective direction</p> <p>Thus, the direction of each wheel just becomes whatever direction the joystick is facing.  It's so simple!</p> <p>Unfortunately, it's not that simple. This only works in robot-centric mode, where \"left\" and \"right\" directions are considered from the perspective of the robot. However, with swerve, you often are facing a different direction than the robot and so this quickly becomes a greivance.</p> <p>Add diagram of the bot strafing left facing in two different directions (robot-centric)</p> <p>The alternative is to use field-centric driving, which makes it so that \"your left\" is always the \"bot's left\", no matter which direction the robot is facing. To adjust for this, we need to get the angle from our gyroscope and adjust the strafing direction.</p> <p>Add diagram of the bot strafing left facing in two different directions (field-centric)</p> <p>Thus, the vector of our strafing has an angle of our joystick minus the angle of our gyroscope. In component form, the strafing vector is (The strafing vector is S):</p> <p> </p> <p> </p> <p>Using our subtraction identities, we can derive the following equations for our code.</p> <p> </p> <p> </p> <p>where <code>joystickX</code> and <code>joystickY</code> are the X and Y magnitudes of our joystick respectively.</p> <p>Of course, this is all in units from 0-1 (or rather, unitless). This can be given directly to the motor speeds, or if you need the values in terms of m/s, you can multiply the vector by your maximum velocity.</p>"},{"location":"Programming/Intro/#the-rotation-vector","title":"The Rotation Vector","text":"<p>A swerve drive can rotate, strafe, or do both at the same time! in order to handle rotation, we need one more vector. Thankfully, this one is takes much less work to compute than the previuos vector.</p> <p>Add diagram of roation vectors on each wheel</p> <p>The direction of the rotation vectors doesn't change, rather the but rather the magnitude. The magnitude is determined by the Right Joysticks y value (r_joy_y). We can say that for each wheel,</p> <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"Programming/Intro/#conclusion","title":"Conclusion","text":"<p>We now have our rotation and strafing vectors. All that's left for us to do is convert each one to component form and add them together to form the final velocity vector for each wheel.</p>"},{"location":"README/","title":"Swerve-Documentation","text":""},{"location":"Strategy/Applications/","title":"Applications for Swerve","text":"<p>Swerve when paired with a proper arm and manipulator can be a great offensive robot, but can function on its own (just the drivetrain) as a defensive bot.</p> What does offensive and defensive mean? <p>Offensive means that the robot is primarily focused on scoring as many game elements as possible. Defensive robots, on the other hand, are focused on preventing the opposing alliance from scoring game elements. </p>"},{"location":"Strategy/Basics/","title":"Strategy Basics","text":"<p>Before delving into particular drive strategy, it is crucial to understand the pros and cons of swerve drive.</p> <p>Info</p> <p>=== \"Pros\"</p> <pre><code>``` markdown\n* Far faster than other drivetrain options (we run at ~3.8 m/s)\n* Tighter manuverability and control\n  - Smaller turn radius and strafing allows for less congestion in small spaces and faster cycle times.\n* In certain wheel and motor arangements, the robot can shrug off heavy hits without moving or taking substantial damage.\n* Manuverabity enhances the ability to dodge incoming, defensive robots with ease. \n* Increased flexibility and options for autonomous mode.\n```\n</code></pre> <p>=== \"Cons\"</p> <pre><code>``` markdown\n* Intesive power consumption and battery sagging.\n* Eight motors for drivetrain alone increase points of failure exponentially.\n  - Increased wiring complexity\n* Less stable (higher center of gravity)\n* Difficult to control (driving aspect)\n* Expensive\n  - Must always keep spare parts and modules in case of damage during competition.\n  - Difficult to repair\n```\n</code></pre>"}]}